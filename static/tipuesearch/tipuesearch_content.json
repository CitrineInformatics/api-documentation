{"pages":[{"title":"Citrination API Documentation","text":"This page contains documentation for the Citrination API. That API can be accessed using a python client (python-citrination-client) or java client (java-citrination-client). These tools, as well as the Citrination platform, are maintained by Citrine Informatics.","tags":"","url":"index.html"},{"title":"quickstart","text":"This guide walks through the steps needed to install the python Citrination client and execute a query against the Citrination site. See the api documentation for a complete description of the methods that are available. Client installation The python client can be install with pip using: pip install citrination-client The library can also be accessed directly on github. After downloading that repository, run the following command to install: python setup.py install Connecting to Citrination In order to access Citrination using the client library, you will need your API key. Your individual key is available on your account page. This key is unique to you; do not share it with anyone. With your API key, a client is configured to run against https:\/\/citrination.com with the following code block: from citrination-client import * client = CitrinationClient('YOUR_API_KEY') For users with private deployments (the site that you are accessing appears as https:\/\/PROJECT-NAME.citrination.com), the client should be configured against your site: from citrination-client import * client = CitrinationClient('YOUR_API_KEY', 'https:\/\/PROJECT-NAME.citrination.com') Executing a query Citrination uses a robust query language to interact with the data that is stored. The following example simply runs a search that looks for records with chemical formula equal to GaN and with a band gap between 3 and 4 eV: from citrination-client import * client = CitrinationClient('YOUR_API_KEY') query = PifQuery( from_index=0, size=10, system=SystemQuery( chemical_formula=ChemicalFieldOperation( filter=ChemicalFilter(equal='GaN') ), properties=PropertyQuery( name=FieldOperation( filter=Filter(equal='Band gap') ), value=FieldOperation( filter=Filter( min=3, max=4 ) ), units=FieldOperation( filter=Filter(equal='eV') ) ) ) ) results = client.search(query) Results are returned as a PifSearchResult object. Next steps Users are encouraged to read about the data model used on Citrination, the PIF, in order to understand how data is represented on the system. The hierarchy of the query language exactly mirrors the hierarchy of the PIF schema. With an understanding of this query language, users are able to query against data in Citrination in a very precise way.","tags":"","url":"quickstart\/index.html"},{"title":"api","text":"The Citrination API provides access to search the data that is stored on the Citrination platform. The following items are needed to connect to the API: The python Citrination client or java Citrination client https:\/\/github.com\/CitrineInformatics\/python-citrination-client or pip install citrination-client https:\/\/github.com\/CitrineInformatics\/java-citrination-client An API key Available on your account page on Citrination","tags":"","url":"api\/index.html"},{"title":"Client","text":"A client is used to maintain a connection to the Citrination platform. Connect to www.citrination.com Java CitrinationClient client = new CitrinationClient.builder() .setApiKey(&quot;YOUR_API_KEY&quot;) .build(); Python client = CitrinationClient('YOUR_API_KEY') Connect to PROJECT.citrination.com Java CitrinationClient client = new CitrinationClient.builder() .setProject(&quot;PROJECT&quot;) .setApiKey(&quot;YOUR_API_KEY&quot;) .build(); Python client = CitrinationClient('YOUR_API_KEY', 'https:\/\/PROJECT.citrination.com')","tags":"","url":"api\/client\/Client.html"},{"title":"search","text":"Search can currently be run against PIF records in the Citrination platform.","tags":"","url":"api\/search\/index.html"},{"title":"pif","text":"The Citrination API is backed by a powerful query language that allows for granular filtering on the data that is stored on Citrination. Individual results are returned in the PIF schema. The query language exactly mirrors the hierarchy of the PIF schema. Users are encouraged to become familiar with that schema before using the query language.","tags":"","url":"api\/search\/pif\/index.html"},{"title":"query","text":"The base object for a query is a PifQuery object.","tags":"","url":"api\/search\/pif\/query\/index.html"},{"title":"chemical","text":"","tags":"","url":"api\/search\/pif\/query\/chemical\/index.html"},{"title":"ChemicalFieldOperation","text":"","tags":"","url":"api\/search\/pif\/query\/chemical\/ChemicalFieldOperation.html"},{"title":"core","text":"The objects in the core package are common across queries.","tags":"","url":"api\/search\/pif\/query\/core\/index.html"},{"title":"FieldOperation","text":"Description A FieldOperation object describes a set of manipulations on a field in the PIF. Fields Field name Value type Default Description filter Array of Filter objects Conditions under which to match the field. Any can match. extract_as String None Name to use as the key in the extracted key-value map. If None, do not extract.","tags":"","url":"api\/search\/pif\/query\/core\/FieldOperation.html"},{"title":"Filter","text":"Description A Filter object describes conditions under which a field is matched. Fields Field name Value type Default Description equal String Exactly match min String Minimum bound (inclusive), using numeric or lexicographic order max String Maximum bound (inclusive), using numeric or lexicographic order","tags":"","url":"api\/search\/pif\/query\/core\/Filter.html"},{"title":"PropertyQuery","text":"Description A PropertyQuery object contains information about a desired property. Fields Field name Value type Default Description name FieldOperation A bag for anything to execute against the name field value FieldOperation A bag for anything to execute against the value field logic | {&quot;MUST&quot;, &quot;SHOULD&quot;, &quot;MUST_NOT&quot;} | &quot;SHOULD&quot; | Match type. If multiple property objects have &quot;SHOULD&quot; logic, at least one such property must match for the system to match.","tags":"","url":"api\/search\/pif\/query\/core\/PropertyQuery.html"},{"title":"ReferenceQuery","text":"","tags":"","url":"api\/search\/pif\/query\/core\/ReferenceQuery.html"},{"title":"SystemQuery","text":"Description A SystemQuery object contains information about a desired system. Fields Field name Value type Default Description properties Array of PropertyQuery objects List of properties to search for","tags":"","url":"api\/search\/pif\/query\/core\/SystemQuery.html"},{"title":"PifQuery","text":"Description A PifQuery object contains all information for a single query. Fields Field name Value type Default Description fromIndex Integer 0 Index of the first hit that should be returned. Used for pagination. size Integer 100 Total number of hits that should be returned. Used for pagination. Maximum value of 100. returnSystem Boolean True True to return the PIF objects that matched. False omits the PIF objects and returns only their IDs. addLatex Boolean False True to inject Latex formatting into the results where possible. This only applies to a small subset of the fields in the results. scoreRelevance Boolean False system Array of SystemQuery objects List of queries to execute at the System level. includeDatasets Array of integers Filter on a subset of datasets by their unique ID. excludeDatasets Array of integers Filter out a subset of datasets by their unique ID. * best is a subjective measure, but is incorporated into Citrination using a relevancy-based metric. A number of factors are used in the relevancy score including the number of terms that matched, quality of match, and frequency of match.","tags":"","url":"api\/search\/pif\/query\/PifQuery.html"},{"title":"result","text":"Search results are returned in a PifSearchResult object.","tags":"","url":"api\/search\/pif\/result\/index.html"},{"title":"PifSearchHit","text":"Description A PifSearchHit object contains information about a single PIF record that was matched. Fields Field name Value type Description id String ID of the record on Citrination. dataset Integer Dataset to which the record belongs. datasetVersion Integer Version of the dataset to which the record belongs. system PIF System The PIF object that was matched. extracted Map of strings to strings Key value map of values that were extracted. See the extractAs field on FieldOperation and ChemicalFieldOperation.","tags":"","url":"api\/search\/pif\/result\/PifSearchHit.html"},{"title":"PifSearchResult","text":"Description A PifSearchResult object contains information about the results of a query. Fields Field name Value type Description took Integer Number of milliseconds that the query took to execute. totalNumHits Integer Total number of hits that matched the query. hits Array of PifSearchHit objects Records that were matched.","tags":"","url":"api\/search\/pif\/result\/PifSearchResult.html"},{"title":"migration","text":"Users of the previous clients that were available for Citrination can use this guide to convert their searches to the newer API syntax. Update client libraries Updates to the python client library are available on github or using pip with pip install citrination-client. Making connections to Citrination using the Python client See the Client page. Search queries The previous python client used the following fields to define a search: term - General search string. This has been deprecated in the new API. formula - Chemical formula to search for. property - Name of the property to search for. contributor - Name of the contributor of the data. This has been deprecated in the new API. reference - Filter against the reference field. This field has been broken into multiple parts. The example below shows how to use the DOI filter. See ReferenceQuery for more options. min_measurement - Minimum value to allow for the property. max_measurement - Maximum value to allow for the property. from_record - Index of the first record to return. per_page - Number of results to return. data_set_id - ID of the dataset to search on. Some fields have been renamed in the new API but carry the exact same meaning. Those fields are as follows: Old API New API from_record from_index per_page size data_set_id include_datasets More generally, queries in the old API map to a the new PifQuery object in the following way. Any fields that are not defined can be omitted. from citrination_client import * query = PifQuery( from_index=`from_record`, size=`per_page`, system=SystemQuery( chemical_formula=ChemicalFieldOperation( filter=ChemicalFilter(equal=`formula`) ), properties=PropertyQuery( name=FieldOperation( filter=Filter(equal=`property`) ), value=FieldOperation( filter=Filter( min=`min_measurement`, max=`max_measurement` ) ) ), references=ReferenceQuery( doi=FieldOperation( filter=Filter(equal=`reference`) ) ) ), include_datasets=[`data_set_id`] ) With this query, the following command can be used to execute against the Citrination site. See PifSearchResult for the format of the results. from citrination_client import * client = CitrinationClient('YOUR_API_KEY') pifSearchResult = client.search(query)","tags":"","url":"migration\/index.html"}]}